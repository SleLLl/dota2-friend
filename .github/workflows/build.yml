name: Publish Release
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  release-management:
    permissions:
      contents: write  # Needed for pushing tags and commits
      issues: write    # Needed for creating GitHub issues
      pull-requests: write  # Needed for updating PRs
    runs-on: ubuntu-latest
    outputs:
      new_release_git_tag: ${{ steps.semantic-release.outputs.new_release_git_tag }}
      release_body: ${{ steps.semantic-release.outputs.new_release_notes }}  # Output release body from Semantic Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/exec
          dry_run: false

  build-windows:
    runs-on: windows-latest
    needs: release-management
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-management.outputs.new_release_git_tag }}

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target' # Set this to npm, yarn or pnpm.

      - name: Install dependencies
        run: npm install

      - name: Build and Release Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY  }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.release-management.outputs.new_release_git_tag }}
          releaseName: 'Dota 2 friend ${{ needs.release-management.outputs.new_release_git_tag }}'
          releaseBody: ${{ needs.release-management.outputs.release_body }}  # Pass release body here
          releaseDraft: false
          prerelease: false